-module(audit_collector).
-behaviour(gen_server).

%% API
-export([start_link/0,
	 stop/0]).

%% gen_server callbacks
-export([init/1, handle_call/3, handle_cast/2, handle_info/2,
	 terminate/2, code_change/3]).

-record(state, {}).

%%%===================================================================
%%% API
%%%===================================================================
start_link() ->
    gen_server:start_link({local, ?MODULE}, ?MODULE, [], []).

stop() ->
    gen_server:call(?MODULE,stop).

audit(process,Options) ->
    gen_server:call(?MODULE,{add_tracing_on,{process,Options}}).

%%%===================================================================
%%% gen_server callbacks
%%%===================================================================
init([]) ->
    {ok, #state{}}.

handle_call(stop, _From, State) ->
    {stop,ok,State};
handle_call({add_tracing_on,{process,Options}},_,State) ->
    erlang:trace(new,true,[timestamp,{tracer,?MODULE},option_to_flag(Opt)||Opt<-Options]), 
    

handle_cast(_Msg, State) ->
    {noreply, State}.

handle_info(_Info, State) ->
    {noreply, State}.

terminate(_Reason, _State) ->
    ok.

code_change(_OldVsn, State, _Extra) ->
    {ok, State}.

%%%===================================================================
%%% Internal functions
%%%===================================================================
